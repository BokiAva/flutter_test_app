# specify global envs and jobs
env:
  global:
    - ANDROID_TOOLS=4333796 # android-28
    - ANDROID_HOME=${HOME}/android-sdk
    - GRAVIS="https://raw.githubusercontent.com/DanySK/Gravis-CI/master/"
    - JDK="1.8" # the JDK used for running tests
  jobs:
    include:

      - stage: Unit Testing
        language: generic
        os: linux
        env: running unit and widget tests with code coverage
        before_script:
          - sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null

          # install pre-compiled flutter
          - FLUTTER_CHANNEL=stable
          - FLUTTER_VERSION=1.9.1+hotfix.6-${FLUTTER_CHANNEL}
          - wget --quiet --output-document=flutter.tar.xz https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/linux/flutter_linux_v${FLUTTER_VERSION}.tar.xz && tar xf flutter.tar.xz > /dev/null && rm flutter.tar.xz
          - export PATH="$PATH":"$HOME/.pub-cache/bin"
          - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
          - flutter doctor -v

          - pub global activate coverage
        script: flutter test --coverage
        after_success: bash <(curl -s https://codecov.io/bash) -f coverage/lcov.info

      - stage: Integration Testing (Android)
        sudo: true
        dist: trusty
        language: generic
        os: linux
        env: running driver on emulator
          jobs:
          #    - API=29 ABI=x86_64      GOO=google_apis_playstore
          #    - API=29 ABI=x86         GOO=google_apis_playstore
          #    - API=29 ABI=x86_64      GOO=google_apis
          #    - API=29 ABI=x86         GOO=google_apis
          #    - API=29 ABI=x86_64      GOO=default
          #    - API=29 ABI=x86         GOO=default
          #
          #    - API=28 ABI=x86_64      GOO=google_apis_playstore
          #    - API=28 ABI=x86         GOO=google_apis_playstore
          #    - API=28 ABI=x86_64      GOO=google_apis
          #    - API=28 ABI=x86         GOO=google_apis
          #    - API=28 ABI=x86_64      GOO=default
          - API=28 ABI=x86         GOO=default
          jobs:
            fast_finish: true
            # jobs that are flakey or fail consistently
            allow_failures:
              - env: API=29 ABI=x86_64      GOO=google_apis_playstore # flutter driver: "No devices found."
              - env: API=29 ABI=x86         GOO=google_apis_playstore # flutter doctor: device offline
              - env: API=29 ABI=x86_64      GOO=google_apis # flutter drive: "Bad state: No element"
          #    - env: API=29 ABI=x86         GOO=google_apis # DriverError: Failed to fulfill GetHealth due to remote error
              - env: API=29 ABI=x86         GOO=default     # hangs while resolving dependencies

              - env: API=28 ABI=x86_64      GOO=google_apis_playstore # flutter driver hangs
          #    - env: API=28 ABI=x86         GOO=google_apis_playstore # flutter driver hangs

              - env: API=26 ABI=x86         GOO=default     # emulator hangs
              - env: API=25 ABI=armeabi-v7a GOO=google_apis # flutter drive reports "apk: Can't find service: package"
              - env: API=25 ABI=arm64-v8a   GOO=google_apis # Timeout (600 seconds) reached; failed to start emulator

              - env: API=24 ABI=x86         GOO=google_apis # flutter driver hangs after resolving gradle dependencies
              - env: API=24 ABI=armeabi-v7a GOO=google_apis # hangs during Installing build/app/outputs/apk/app.apk...
              - env: API=24 ABI=arm64-v8a   GOO=google_apis # Timeout (600 seconds) reached; failed to start emulator
              - env: API=24 ABI=armeabi-v7a GOO=default     # hangs after installing apk
              - env: API=24 ABI=arm64-v8a   GOO=default     # Timeout (600 seconds) reached; failed to start emulator

              - env: API=23 ABI=armeabi-v7a GOO=google_apis # hangs during Installing build/app/outputs/apk/app.apk...
              - env: API=23 ABI=armeabi-v7a GOO=default     # hangs after installing apk

              - env: API=22 ABI=x86_64      GOO=default     # flutter drive hangs during installation of apk
              - env: API=22 ABI=armeabi-v7a GOO=google_apis # hangs after installing apk

              - env: API=21 ABI=armeabi-v7a GOO=google_apis # Timeout (600 seconds) reached; failed to start emulator

              - env: API=19 ABI=armeabi-v7a GOO=google_apis # hangs after installing apk
              - env: API=19 ABI=armeabi-v7a GOO=default     # hangs on Installing build/app/outputs/apk/app.apk...

              - env: API=18 ABI=armeabi-v7a GOO=google_apis # flutter driver: incorrect success after installing apk

              - env: API=17 ABI=x86         GOO=google_apis # FlutterDriver: It is taking an unusually long time to connect to the VM...
              - env: API=17 ABI=x86         GOO=default     # FlutterDriver: It is taking an unusually long time to connect to the VM...

              - env: API=16 ABI=x86         GOO=google_apis # FlutterDriver: It is taking an unusually long time to connect to the VM...
              - env: API=16 ABI=x86         GOO=default     # FlutterDriver: It is taking an unusually long time to connect to the VM...
              - env: API=16 ABI=armeabi-v7a GOO=google_apis # hangs after installing apk
              - env: API=16 ABI=armeabi-v7a GOO=default     # hangs after installing apk
        # Run integration tests on android
        before_install:
          # check if hardware acceleration is enabled
          - cat /proc/cpuinfo|grep vmx

          - java -version

          # Set up KVM
          - sudo apt-get -y --no-install-recommends install bridge-utils libpulse0 libvirt-bin qemu-kvm virtinst ubuntu-vm-builder > /dev/null
          # add travis user to groups
          - sudo adduser $USER libvirt
          - sudo adduser $USER kvm

          # Set up JDK 8 for Android SDK
          - curl "${GRAVIS}.install-jdk-travis.sh" --output ~/.install-jdk-travis.sh
          - export TARGET_JDK="${JDK}"
          - JDK="1.8" # used when running sdkmanager
          - source ~/.install-jdk-travis.sh

          # Set up Android SDK
        #  - |
        #    if [[ $ABI =~ "arm" ]]; then
        #      sudo apt-get -y --no-install-recommends install libxcursor1 # required by ARM emulator
        #    fi
          - wget -q "https://dl.google.com/android/repository/sdk-tools-linux-$ANDROID_TOOLS.zip" -O android-sdk-tools.zip
          - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
          - rm android-sdk-tools.zip

          # Avoid harmless sdkmanager warning
          - mkdir ~/.android
          - echo 'count=0' > ~/.android/repositories.cfg

          # Accept licenses before installing components, no need to echo y for each component
          - yes | sdkmanager --licenses >/dev/null
          - chmod +x ./script/android-wait-for-emulator.sh
        install:
          # - sudo snap install kotlin --classic
          # Download SDK tools
          - sdkmanager "platform-tools" >/dev/null
          - sdkmanager "tools" >/dev/null # A second time per Travis docs, gets latest versions
          - sdkmanager "build-tools;29.0.2" >/dev/null # Implicit gradle dependency - gradle drives changes
          - sdkmanager "platforms;android-$API" >/dev/null # We need the API of the emulator we will run
          - sdkmanager "platforms;android-29" >/dev/null # We need the API of the current compileSdkVersion from gradle.properties  -

          - sdkmanager "emulator" >/dev/null
          # Fixed in version 29.3.1 https://androidstudio.googleblog.com/2019/12/emulator-2930-stable.html
          # Pinning should no longer be necessary: https://issuetracker.google.com/issues/145622251
        #  - |
        #    if [[ $ABI =~ "x86" ]]; then
        #      # Download a pinned version of the emulator since default version can cause issues
        #      ${ANDROID_HOME}/emulator/emulator -version
        #      emulator_version=5889189 # 29.2.11.0 (build_id 6031357) or later ==> 29.2.1.0 (build_id 5889189)
        #      curl -fo emulator.zip "https://dl.google.com/android/repository/emulator-linux-$emulator_version.zip"
        #      rm -rf "${ANDROID_HOME}/emulator"
        #      unzip -q emulator.zip -d "${ANDROID_HOME}"
        #      rm -f emulator.zip
        #    fi
          - |
            if [[ $ABI =~ "arm" ]]; then
              # Download a pinned version of the emulator since default version can cause issues
              ${ANDROID_HOME}/emulator/emulator -version
              emulator_version=5264690 # 29.2.1.0 (build_id 5889189) or later ==> 28.0.23.0 (build_id 5264690)
              # sudo apt-get install -y libunwind8 libc++1
              curl -fo emulator.zip "https://dl.google.com/android/repository/emulator-linux-$emulator_version.zip"
              rm -rf "${ANDROID_HOME}/emulator"
              unzip -q emulator.zip -d "${ANDROID_HOME}"
              rm -f emulator.zip
              # install build tools and platforms for arm (to allow emulator to run)
              sdkmanager "build-tools;25.0.2" "platforms;android-25" > /dev/null
            fi
          - ${ANDROID_HOME}/emulator/emulator -version

          - sdkmanager "extras;android;m2repository" >/dev/null
          - sdkmanager "system-images;android-$API;$GOO;$ABI" >/dev/null # install system images for emulator

          # Create an Android emulator
        #  - echo no | avdmanager --verbose create avd --force -n test -k "system-images;android-$API;$GOO;$ABI" -c 10M
          - echo no | avdmanager --verbose create avd --force -n test -k "system-images;android-$API;$GOO;$ABI"
        #  - EMU_PARAMS="
        #      -verbose
        #      -no-snapshot
        #      -no-window
        #      -no-audio
        #      -no-boot-anim
        #      -camera-back none
        #      -camera-front none
        #      -selinux permissive
        #      -qemu -m 2048"
          - EMU_PARAMS="
            -avd test
            -no-window
            -no-audio
            "
          - EMU_COMMAND="emulator"
          - |
            if [[ $ABI =~ "x86" ]]; then
              # EMU_COMMAND="emulator-headless"
              echo -n # noop
            else
              # emulate graphics if running on ARM
              EMU_PARAMS="${EMU_PARAMS} -gpu swiftshader"
            fi
          # This double "sudo" monstrosity is used to have Travis execute the
          # emulator with its new group permissions and help preserve the rule
          # of least privilege.
          - sudo -E sudo -u $USER -E bash -c "${ANDROID_HOME}/emulator/${EMU_COMMAND} ${EMU_PARAMS} &"

          # install flutter (while emulator is starting)
        #  - sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null
          - wget --quiet --output-document=flutter.tar.xz https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/linux/flutter_linux_v${FLUTTER_VERSION}.tar.xz
          - tar xf flutter.tar.xz -C $(dirname ${FLUTTER_HOME})
          - rm flutter.tar.xz

          # Switch back to our target JDK version to build and run tests
          - JDK="${TARGET_JDK}"
          - source ~/.install-jdk-travis.sh
        before_script:
          # Clone Flutter
          # We clone the Flutter beta branch. You should clone whatever branch
          # you know works for building production apps.
          # If in doubt, you are advised to use the stable branch of Flutter
          # for production apps and you would do this by changing -b beta to -b stable
          # but we started the project before stable existed and whilst beta has always
          # worked reasonably well for us and we find stable is usually too outdated
          # and has too many missing framework features.
          - git clone https://github.com/flutter/flutter.git -b beta --depth 1
          - flutter doctor -v
        script:
          # run integration tests with retries
          - flutter driver test_driver/app.dart

          # run widget tests
          - ./flutter/bin/flutter test

      - stage: Integration Testing (iOS)
        os: osx
        # use oldest flutter supported version of xcode
        osx_image: xcode9.4.1
        env: running driver on simulator
        # Run integration tests on ios
        before_install:
          - open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app
          - export HOMEBREW_NO_AUTO_UPDATE=1
          - brew install libimobiledevice
          - brew install ideviceinstaller
          - brew install ios-deploy
          - brew install cocoapods || echo 'ignore exit(1)'
          - brew link --overwrite cocoapods

          # install pre-compiled flutter
          - FLUTTER_CHANNEL=stable
          - FLUTTER_VERSION=1.9.1+hotfix.6-${FLUTTER_CHANNEL}
          - wget --quiet --output-document=flutter.zip https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/macos/flutter_macos_v${FLUTTER_VERSION}.zip && unzip -qq flutter.zip > /dev/null && rm flutter.zip
          - export PATH="$PATH":"$HOME/.pub-cache/bin"
          - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
          - flutter doctor -v
        script:
          # run integration tests with retries
          - flutter driver test_driver/app.dart

          # run widget tests
          - ./flutter/bin/flutter test

cache:
  directories:
    - $HOME/.pub-cache
#    - $HOME/.gradle/caches/
#    - $HOME/.gradle/wrapper/
