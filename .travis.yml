jobs:
  include:

    - stage: Unit Testing
      language: generic
      os: linux
      env: running unit and widget tests with code coverage
      before_script:
        - sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null

        # install pre-compiled flutter
        - FLUTTER_CHANNEL=stable
        - FLUTTER_VERSION=1.9.1+hotfix.6-${FLUTTER_CHANNEL}
        - wget --quiet --output-document=flutter.tar.xz https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/linux/flutter_linux_v${FLUTTER_VERSION}.tar.xz && tar xf flutter.tar.xz > /dev/null && rm flutter.tar.xz
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter doctor -v

        - pub global activate coverage
      script: flutter test --coverage
      after_success: bash <(curl -s https://codecov.io/bash) -f coverage/lcov.info

    - &integration-test-stage
      stage: Integration Testing
      sudo: true
      dist: trusty
      language: generic
      os: linux
      env: running driver on emulator
        jobs:
          fast_finish: true
          # jobs that are flakey or fail consistently
          allow_failures:
            - env: API=29 ABI=x86_64      GOO=google_apis_playstore # flutter driver: "No devices found."
            - env: API=29 ABI=x86         GOO=google_apis_playstore # flutter doctor: device offline
            - env: API=29 ABI=x86_64      GOO=google_apis # flutter drive: "Bad state: No element"
        #    - env: API=29 ABI=x86         GOO=google_apis # DriverError: Failed to fulfill GetHealth due to remote error
            - env: API=29 ABI=x86         GOO=default     # hangs while resolving dependencies

            - env: API=28 ABI=x86_64      GOO=google_apis_playstore # flutter driver hangs
        #    - env: API=28 ABI=x86         GOO=google_apis_playstore # flutter driver hangs

            - env: API=26 ABI=x86         GOO=default     # emulator hangs
            - env: API=25 ABI=armeabi-v7a GOO=google_apis # flutter drive reports "apk: Can't find service: package"
            - env: API=25 ABI=arm64-v8a   GOO=google_apis # Timeout (600 seconds) reached; failed to start emulator

            - env: API=24 ABI=x86         GOO=google_apis # flutter driver hangs after resolving gradle dependencies
            - env: API=24 ABI=armeabi-v7a GOO=google_apis # hangs during Installing build/app/outputs/apk/app.apk...
            - env: API=24 ABI=arm64-v8a   GOO=google_apis # Timeout (600 seconds) reached; failed to start emulator
            - env: API=24 ABI=armeabi-v7a GOO=default     # hangs after installing apk
            - env: API=24 ABI=arm64-v8a   GOO=default     # Timeout (600 seconds) reached; failed to start emulator

            - env: API=23 ABI=armeabi-v7a GOO=google_apis # hangs during Installing build/app/outputs/apk/app.apk...
            - env: API=23 ABI=armeabi-v7a GOO=default     # hangs after installing apk

            - env: API=22 ABI=x86_64      GOO=default     # flutter drive hangs during installation of apk
            - env: API=22 ABI=armeabi-v7a GOO=google_apis # hangs after installing apk

            - env: API=21 ABI=armeabi-v7a GOO=google_apis # Timeout (600 seconds) reached; failed to start emulator

            - env: API=19 ABI=armeabi-v7a GOO=google_apis # hangs after installing apk
            - env: API=19 ABI=armeabi-v7a GOO=default     # hangs on Installing build/app/outputs/apk/app.apk...

            - env: API=18 ABI=armeabi-v7a GOO=google_apis # flutter driver: incorrect success after installing apk

            - env: API=17 ABI=x86         GOO=google_apis # FlutterDriver: It is taking an unusually long time to connect to the VM...
            - env: API=17 ABI=x86         GOO=default     # FlutterDriver: It is taking an unusually long time to connect to the VM...

            - env: API=16 ABI=x86         GOO=google_apis # FlutterDriver: It is taking an unusually long time to connect to the VM...
            - env: API=16 ABI=x86         GOO=default     # FlutterDriver: It is taking an unusually long time to connect to the VM...
            - env: API=16 ABI=armeabi-v7a GOO=google_apis # hangs after installing apk
            - env: API=16 ABI=armeabi-v7a GOO=default     # hangs after installing apk
      # Run integration tests on android
      before_install:
        - sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null
        # Install the Android SDK Dependency.
        - export ANDROID_HOME=/opt/android-sdk-linux
        - cd /opt
        - wget -q https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O android-sdk-tools.zip
        - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
        - rm android-sdk-tools.zip
        - cd -
        - PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools
        # Silence warning.
        - mkdir -p ~/.android
        - touch ~/.android/repositories.cfg
        # Accept licenses before installing components, no need to echo y for each component
        - yes | sdkmanager --licenses
        # Platform tools
        - sdkmanager "emulator" "tools" "platform-tools" > /dev/null
        - sdkmanager --list | head -15
        # install older packages (for emulator)
        - sdkmanager "build-tools;25.0.2" "platforms;android-25" > /dev/null

        # Create and start emulator.
        - EMULATOR_API_LEVEL=22
        - ANDROID_ABI="default;armeabi-v7a"
        - sdkmanager "system-images;android-$EMULATOR_API_LEVEL;$ANDROID_ABI" > /dev/null
        - sdkmanager --list | head -15
        - echo no | avdmanager create avd --force -n test -k "system-images;android-$EMULATOR_API_LEVEL;$ANDROID_ABI"
        - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader &
        - chmod +x ./script/android-wait-for-emulator.sh

        # install pre-compiled flutter
        - FLUTTER_CHANNEL=stable
        - FLUTTER_VERSION=1.9.1+hotfix.6-${FLUTTER_CHANNEL}
        - wget --quiet --output-document=flutter.tar.xz https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/linux/flutter_linux_v${FLUTTER_VERSION}.tar.xz && tar xf flutter.tar.xz > /dev/null && rm flutter.tar.xz
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH

        # Wait for emulator to finish startup.
        - ./script/android-wait-for-emulator.sh
        - adb shell input keyevent 82
        - flutter devices
      before_script:
        # Clone Flutter
        # We clone the Flutter beta branch. You should clone whatever branch
        # you know works for building production apps.
        # If in doubt, you are advised to use the stable branch of Flutter
        # for production apps and you would do this by changing -b beta to -b stable
        # but we started the project before stable existed and whilst beta has always
        # worked reasonably well for us and we find stable is usually too outdated
        # and has too many missing framework features.
        - git clone https://github.com/flutter/flutter.git -b beta --depth 1
        - flutter doctor -v

      script: travis_retry flutter driver test_driver/app.dart
    - <<: *integration-test-stage
      os: osx
      # use oldest flutter supported version of xcode
      osx_image: xcode8.0
      env: running driver on simulator
      # Run integration tests on ios
      before_install:
        - open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app
        - export HOMEBREW_NO_AUTO_UPDATE=1
        - brew install libimobiledevice
        - brew install ideviceinstaller
        - brew install ios-deploy
        - brew install cocoapods || echo 'ignore exit(1)'
        - brew link --overwrite cocoapods

        # install pre-compiled flutter
        - FLUTTER_CHANNEL=stable
        - FLUTTER_VERSION=1.9.1+hotfix.6-${FLUTTER_CHANNEL}
        - wget --quiet --output-document=flutter.zip https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/macos/flutter_macos_v${FLUTTER_VERSION}.zip && unzip -qq flutter.zip > /dev/null && rm flutter.zip
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter doctor -v

    - stage: Ready to deploy
      os: osx
      language: generic
      env: not implemented ðŸ¤“
      script: echo "Deploying to store ..."